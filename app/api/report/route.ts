import { padZero } from "@/helpers/common";
import prisma from "@/prisma/db";
import { createReportSchema } from "@/types/validationSchemas";
import { rangeCheck } from "@/utils/rangeCheck";
import { Prisma } from "@prisma/client";
import { NextRequest, NextResponse } from "next/server";

export const POST = async (req: NextRequest) => {
  const body = await req.json();

  console.log(body);

  const validation = createReportSchema.safeParse(body);
  if (!validation.success) {
    return NextResponse.json(validation.error.errors, { status: 400 });
  }

  const {
    ID,
    REG,
    CWT,
    AMP,
    TAM,
    MUN,
    EA,
    VIL,
    TSIC_R,
    TSIC_L,
    SIZE_R,
    SIZE_L,
    NO,
    QTR,
    YR,
    ENU,
    TITLE,
    RANK,
    FIRSTNAME,
    LASTNAME,
    EST_TITLE,
    EST_NAME,
    ADD_NO,
    BUILDING,
    ROOM,
    STREET,
    BLK,
    SOI,
    SUB_DIST,
    DISTRICT,
    PROVINCE,
    POST_CODE,
    TEL_NO,
    E_MAIL,
    WEBSITE,
    SOCIAL,
    TSIC_CHG,
    LG,
    LG1,
    LG1_temp,
    LG2,
    LG3,
    LG4,
    DES_TYPE,
    TYPE,
    M1,
    M2,
    M3,
    R1,
    R2,
    R3,
    TR,
    SI,
    ITR,
    SI1,
    SI2,
    SI3,
    SI4,
    SI5,
    SI6,
    SI7,
    SI8,
    SI11,
    SI22,
    SI33,
    SI44,
    SI55,
    SI66,
    SI77,
    F1,
    F2,
    F3,
    F4,
    F5,
    CHG,
    CIN,
    CDE,
    FAC,
    FAC_1,
    PRVS,
    PIN,
    PDE,
    STO,
    DAY,
    OP1,
    OP2,
    OP3,
    OP4,
    OP5,
    OP6,
    OP7,
    OP8,
    OP9,
    OP10,
    OP11,
    OP12,
    P1,
    P2,
    P3,
    P4,
  } = body;

  try {
    await prisma.report.upsert({
      where: { uniqueReport: { ID, YR, QTR } },
      update: {
        AMP: padZero(AMP, rangeCheck[AMP as keyof typeof rangeCheck]),
        TAM: padZero(TAM, rangeCheck[TAM as keyof typeof rangeCheck]),
        MUN,
        EA: padZero(EA, rangeCheck[EA as keyof typeof rangeCheck]),
        VIL: padZero(VIL, rangeCheck[VIL as keyof typeof rangeCheck]),
        TSIC_R,
        SIZE_R: padZero(SIZE_R, rangeCheck[SIZE_R as keyof typeof rangeCheck]),
        ENU: padZero(ENU, rangeCheck[ENU as keyof typeof rangeCheck]),
        TITLE,
        RANK,
        FIRSTNAME,
        LASTNAME,
        EST_TITLE,
        EST_NAME,
        ADD_NO,
        BUILDING,
        ROOM,
        STREET,
        BLK,
        SOI,
        SUB_DIST,
        DISTRICT,
        PROVINCE,
        POST_CODE,
        TEL_NO,
        E_MAIL,
        WEBSITE,
        SOCIAL,
        TSIC_CHG,
        LG: padZero(LG, rangeCheck[LG as keyof typeof rangeCheck]),
        LG1,
        LG1_temp,
        LG2,
        LG3,
        LG4,
        DES_TYPE,
        TYPE,
        M1,
        M2,
        M3,
        R1,
        R2,
        R3,
        TR,
        SI,
        ITR: padZero(ITR, rangeCheck[ITR as keyof typeof rangeCheck]),
        SI1,
        SI2,
        SI3,
        SI4,
        SI5,
        SI6,
        SI7,
        SI8,
        SI11: padZero(SI11, rangeCheck[SI11 as keyof typeof rangeCheck]),
        SI22: padZero(SI22, rangeCheck[SI22 as keyof typeof rangeCheck]),
        SI33: padZero(SI33, rangeCheck[SI33 as keyof typeof rangeCheck]),
        SI44: padZero(SI44, rangeCheck[SI44 as keyof typeof rangeCheck]),
        SI55: padZero(SI55, rangeCheck[SI55 as keyof typeof rangeCheck]),
        SI66: padZero(SI66, rangeCheck[SI66 as keyof typeof rangeCheck]),
        SI77: padZero(SI77, rangeCheck[SI77 as keyof typeof rangeCheck]),
        F1: padZero(F1, rangeCheck[F1 as keyof typeof rangeCheck]),
        F2: padZero(F2, rangeCheck[F2 as keyof typeof rangeCheck]),
        F3: padZero(F3, rangeCheck[F3 as keyof typeof rangeCheck]),
        F4: padZero(F4, rangeCheck[F4 as keyof typeof rangeCheck]),
        F5: padZero(F5, rangeCheck[F5 as keyof typeof rangeCheck]),
        CHG,
        CIN: padZero(CIN, rangeCheck[CIN as keyof typeof rangeCheck]),
        CDE: padZero(CDE, rangeCheck[CDE as keyof typeof rangeCheck]),
        FAC: padZero(FAC, rangeCheck[FAC as keyof typeof rangeCheck]),
        FAC_1,
        PRVS,
        PIN: padZero(PIN, rangeCheck[PIN as keyof typeof rangeCheck]),
        PDE: padZero(PDE, rangeCheck[PDE as keyof typeof rangeCheck]),
        STO,
        DAY,
        OP1,
        OP2,
        OP3,
        OP4,
        OP5,
        OP6,
        OP7,
        OP8,
        OP9,
        OP10,
        OP11,
        OP12,
        P1,
        P2,
        P3,
        P4,
      },
      create: {
        ID,
        REG,
        CWT,
        AMP,
        TAM,
        MUN,
        EA,
        VIL,
        TSIC_R,
        TSIC_L,
        SIZE_R,
        SIZE_L,
        NO,
        QTR,
        YR,
        ENU,
        TITLE,
        RANK,
        FIRSTNAME,
        LASTNAME,
        EST_TITLE,
        EST_NAME,
        ADD_NO,
        BUILDING,
        ROOM,
        STREET,
        BLK,
        SOI,
        SUB_DIST,
        DISTRICT,
        PROVINCE,
        POST_CODE,
        TEL_NO,
        E_MAIL,
        WEBSITE,
        SOCIAL,
        TSIC_CHG,
        LG,
        LG1,
        LG1_temp,
        LG2,
        LG3,
        LG4,
        DES_TYPE,
        TYPE,
        M1,
        M2,
        M3,
        R1,
        R2,
        R3,
        TR,
        SI,
        ITR,
        SI1,
        SI2,
        SI3,
        SI4,
        SI5,
        SI6,
        SI7,
        SI8,
        SI11,
        SI22,
        SI33,
        SI44,
        SI55,
        SI66,
        SI77,
        F1,
        F2,
        F3,
        F4,
        F5,
        CHG,
        CIN,
        CDE,
        FAC,
        FAC_1,
        PRVS,
        PIN,
        PDE,
        STO,
        DAY,
        OP1,
        OP2,
        OP3,
        OP4,
        OP5,
        OP6,
        OP7,
        OP8,
        OP9,
        OP10,
        OP11,
        OP12,
        P1,
        P2,
        P3,
        P4,
      },
    });
    return NextResponse.json("สร้างแบบฟอร์มสำเร็จ");
  } catch (e) {
    if (e instanceof Prisma.PrismaClientKnownRequestError) {
      console.log(e);
    }
    throw e;
  }
};
